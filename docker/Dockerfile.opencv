# SwarmMap Docker Build - Step 2: OpenCV 4.2.0 with CUDA
FROM nvidia/cuda:11.8.0-devel-ubuntu20.04

ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC
ENV CUDA_ARCH_BIN="8.6"
ENV CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda

# Install base build tools
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    wget \
    curl \
    pkg-config \
    software-properties-common \
    ca-certificates \
    unzip \
    && rm -rf /var/lib/apt/lists/*

# Install OpenCV dependencies
RUN apt-get update && apt-get install -y \
    # Core dependencies
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libv4l-dev \
    libxvidcore-dev \
    libx264-dev \
    # GTK for GUI support
    libgtk-3-dev \
    libgtk2.0-dev \
    # Math optimization
    libatlas-base-dev \
    gfortran \
    # Python (for building, even if not using Python bindings)
    python3-dev \
    python3-numpy \
    # Additional video I/O
    libgstreamer1.0-dev \
    libgstreamer-plugins-base1.0-dev \
    # OpenGL support
    libgl1-mesa-dev \
    libglu1-mesa-dev \
    # Other
    libtbb2 \
    libtbb-dev \
    libdc1394-22-dev \
    libeigen3-dev \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /root

# Download OpenCV 4.2.0 and opencv_contrib
RUN echo "Downloading OpenCV 4.2.0..." && \
    wget -q https://github.com/opencv/opencv/archive/4.2.0.zip -O opencv.zip && \
    wget -q https://github.com/opencv/opencv_contrib/archive/4.2.0.zip -O opencv_contrib.zip && \
    unzip -q opencv.zip && \
    unzip -q opencv_contrib.zip && \
    rm opencv.zip opencv_contrib.zip

# Create build directory
RUN mkdir -p /root/opencv-4.2.0/build

WORKDIR /root/opencv-4.2.0/build

# Configure OpenCV with CUDA support
# Key flags:
# - WITH_CUDA=ON: Enable CUDA
# - CUDA_ARCH_BIN=8.6: RTX A6000 compute capability
# - WITH_CUDNN=OFF: We don't need cuDNN for ORB-SLAM2
# - CUDA_FAST_MATH=ON: Enable fast math for better performance
# - WITH_CUBLAS=ON: Use CUDA BLAS
RUN cmake -D CMAKE_BUILD_TYPE=RELEASE \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    -D OPENCV_EXTRA_MODULES_PATH=/root/opencv_contrib-4.2.0/modules \
    -D WITH_CUDA=ON \
    -D CUDA_ARCH_BIN=8.6 \
    -D CUDA_ARCH_PTX="" \
    -D ENABLE_FAST_MATH=1 \
    -D CUDA_FAST_MATH=1 \
    -D WITH_CUBLAS=1 \
    -D WITH_CUDNN=OFF \
    -D OPENCV_DNN_CUDA=OFF \
    -D WITH_OPENGL=ON \
    -D WITH_TBB=ON \
    -D WITH_V4L=ON \
    -D WITH_QT=OFF \
    -D WITH_GTK=ON \
    -D BUILD_TESTS=OFF \
    -D BUILD_PERF_TESTS=OFF \
    -D BUILD_EXAMPLES=OFF \
    -D OPENCV_GENERATE_PKGCONFIG=ON \
    ..

# Build OpenCV (this will take a while - 20-40 minutes depending on CPU)
# Using 8 parallel jobs to speed up compilation
RUN echo "Building OpenCV 4.2.0 with CUDA support..." && \
    make -j8

# Install OpenCV
RUN make install && \
    ldconfig

# Verify OpenCV installation
RUN pkg-config --modversion opencv4 && \
    echo "OpenCV 4.2.0 with CUDA installed successfully"

# Clean up build files to reduce image size
RUN cd /root && \
    rm -rf opencv-4.2.0 opencv_contrib-4.2.0

WORKDIR /root

CMD ["/bin/bash"]
